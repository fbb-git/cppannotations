The next bf(C++) standard will be i(C++17) (also referred to as i(C++1z)).
Work is currently in progress to add the new (C++17) features of the language
to the next major version upgrade of the Gnu tt(g++) compiler (version
7.0.0 or beyond).

The working draft of the standard is freely available, and can be cloned from
the git-repository at lurl(https://github.com/cplusplus/draft.git)

In time the annotations() will reflect the changes related to the C++17
standard. Refer to the C++17 entry in the index for locations where the C++17
standard is mentioned.

The i(C++17) standard adds the following features to the language:

description(    
dit(Aggregate initialization extensions)

    Aggreates (e.g., structs) can be initialized using the familiar
curly-brace notation. C++17 extends the initialization possibilities by
allowing, e.g., structs using inheritance to be initialized using the curly
braces notation as well. Example:
        verb(
struct Base
{
    int value;
};
struct Derived: public Base
{
    string text;
    void member();
};

// Initializing a Derived object:

Derived der{{value}, "hello world"};
//          -------
//          initialization of the (first) base class.
        )

dit(Evaluation order of operands of operators)

    Up to C++17, the evaluation order of expressions of operands of binary
operators is, except for the boolean operators tt(and) and tt(or), not
defined. C++17 changes this for postfix expressions, assignment expressions
(including compound assignments), and shift operators:
    itemization(
    it() Postfix expressions (like index operators and member selectors) 
        are evaluated from left to right;
    it() Assignment expressions are evaluated from right to left;
    it() Operands of shift operators are evaluated from left to right.
    )
    In the following examples tt(first) is evaluated before tt(second), before
tt(third), before tt(fourth), whether they are single variables, parenthesized
expressions, or function calls:
        verb(
    first.second
    fourth += third = second += first
    first << second << third << fourth
    first >> second >> third >> fourth
        )
    In addition, when overloading an operator, the function implementing the
overloaded operator is evaluated like the built-in operator it overloads, and
not in the way function calls are ordered in general.

dit([[fallthrough]])hi(fallthrough)

    When statements that are nested under tt(case) entries in tt(switch)
statements continue into subsequent tt(case) or tt(default) entries the
compiler will issue a `falling through' warning. If falling through is
intentional the attribute tt([[fallthrough]]) should be used. Here is an
annotated example:
        verb(
void function(int selector)
{
    switch (selector)
    {
        case 1:
        case 2:             // no falling through, but merged entry points
            cout << "cases 1 and 2\n";
        [[fallthrough]];
        case 3:
            cout << "case 3\n";

        case 4:             // a warning is issued
            cout << "case 4\n";
        [[fallthrough]];    // error: nothing beyond
    }
}
        )

dit(if constexpr)

    In template definitions tt(if constexpr) statements may be used to
instantiate parts of a function definition depending on the value of the
expression following tt(constexpr). This is further elaborated in section
ref(IFCONST). 

dit(Inline variables)

    In addition to inline functions, hi(variable: inline) 
inline variables can be defined (and identically initialized) in multiple
translation units. E.g., a header file could contain
        verb(
    inline int value = 15;                      OK

    class Demo
    {
        // static int s_value = 15;             ERROR
        static int constexpr s_value = 15;      OK

        static int s_inline;                    NEW, see below
    };
    inline int Demo::s_inline = 20;             OK
        )

dit(Keywords `export' and `register')

    The keywords ti(export) and ti(register) are no longer used, but are still
identifiers that are reserved for future use. In other words, definitions like
        verb(
    register int index;
        )
    result in compilation errors. Also, tt(register) is no longer considered a
    i(storage class specifier) (storage class specifiers are tt(extern,
thread_local, mutable) and tt(static)).

dit([[maybe_unused]])hi(maybe_unused)

    This attribute can be applied to a class, typedef-name, variable,
non-static data member, a function, an enumeration or an enumerator. When it
is applied to an entity no warning is generated whether the entity is used or
is not used. Example:
        verb(
void fun([[maybe_unused]] size_t argument)
{
    // argument isn't used, but no warning 
    // telling you so is generated
}
        )

dit(lambda expressions)

    Lambda expressions were extended. See the sections marked with tt(C++17)
in section ref(LAMBDA).

dit([[nodiscard]])hi(nodiscard)

    The attribute tt([[nodiscard]]) may be specified when declaring a
function, class or enumeration. If a function is declared tt([[nodiscard]]) or
if a function returns an entity previously declared using tt([[nodiscard]])
then the return value of such a function may only be ignored when explicitly
cast to void. Otherwise, when the return value is not used as warning is
issued. Example:
        verb(
int [[nodiscard]] importantInt();
struct [[nodiscard]] ImportantStruct { ... };

ImportantStruct factory();
    
int main()
{
    importantInt();         // warning issued
    factory();              // warning issued
}
        )

dit(Nested namespace definitions)

    When nesting namespaces, a nested namespace can directly be referred to
using scope resolution operators. E.g.,
        verb(
namespace Outer::Middle::Inner
{
    // entities defined/declared here are defined/declared in the Inner
    // namespace, which is defined in the Middle namespace, which is defined
    // in the Outer namespace
}
        )

dit(Template argument deduction for class templates)

    In some situations template arguments for class templates can be deduced
by the compiler. See section ref(ARGDEDUCTION) for details.
    
COMMENT(END description))














